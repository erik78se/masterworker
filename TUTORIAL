# Implementing a Master Worker pattern with Juju Relations

# Work in progress:
* Test out relation_ids()
* Clean up hookenv.py
* Fix README.md
* Work out a path for the tutorial
* Get a better state-machine image

# Python & hook-tools
  * Explain juju help-tools <hook-tools>

# Master worker pattern
 * Describe the pattern.
 * Make sure to have read: https://discourse.juju.is/t/the-lifecycle-of-charm-relations/1050
 * Joining
    - Learn that only the key-value pair: private-address is available at the "relation-join" event.
    -
 * Exchanging information (relation-change)
   - When a change on a relation data occurs, ALL related units will fire their
     relation-change events and have access to ALL data in that relation dictionary.
     There exist no means to have a single unit be unicasted that event.
     In a sense, juju multicasts relational data all the time. The only way to
     hand out data to a single unit, is to have a key-name on the relation data
     which links the unit to its own value. We will use that in the master-worker
     tutorial.

* Inspecting the relations

$ juju run --unit master/0 "relation-ids master-service"
master-service:0

# Remove and add back the relation to see how the relation-id changes from
# master-service:0 to master-service:1
$ juju remove-relation master worker
$ juju relate master worker

$ juju run --unit master/0 'relation-ids master-service'
master-service:1

$ juju run --unit worker/0 'relation-get -r master:1 - master/0'
egress-subnets: 172.31.27.134/32
ingress-address: 172.31.27.134
private-address: 172.31.27.134
worker/0-worker-key: "5914"
worker/1-worker-key: ADA1
$ juju run --unit master/0 'relation-get -r master-service:1 - worker/0'
egress-subnets: 172.31.35.128/32
ingress-address: 172.31.35.128
private-address: 172.31.35.128

# Get individial keys: (relation-get -r <relation-id> <key> <unit>, if "-", get all keys)
$ juju run --unit master/0 "relation-get -r master-service:1 worker/1-worker-key master/0"
ADA1

 * Adding more units

 * Departing
 * The last unit to depart:
  - the final unit to depart a relation marked for termination is responsible
    for destroying the relation and all associated data.

* Relation
 [master/0 has master-service:1] <---- simian ---> [master:1 has worker/0]
                                 <---- simian ---> [master:1 has worker/1]

* Introspect
$ juju run --unit master/0 "relation-ids master-service"
master-service:0

$ juju run --unit master/0 "relation-list -r master-service:1"
worker/0
worker/1

$ juju run --unit worker/0 "relation-list -r master:1"
master/0

# Look at the relation data for the master-service on the master/0 side.
# where we would expect to see the worker-keys.
$ juju run --unit master/0 "relation-get -r master-service:1 - master/0"
egress-subnets: 172.31.27.134/32
ingress-address: 172.31.27.134
private-address: 172.31.27.134
worker/0-worker-key: "5914"
worker/1-worker-key: ADA1

# Look at the worker/0 side of the same relation. Where the keys shouldn't be
$ juju run --unit master/0 "relation-get -r master-service:1 - worker/0"
egress-subnets: 172.31.35.128/32
ingress-address: 172.31.35.128
private-address: 172.31.35.128
