#!/usr/bin/env python3
import os
import sys
sys.path.insert(0, os.path.join(os.environ['CHARM_DIR'], 'lib'))
import hookenv

def master_service_relation_changed():
    """
    Whenever a change on the wire for the relation is made,
    this hook is triggered.
    E.g. * New unit arrives (after the relation-joined hook has run)
         * Data values change.
         * Keys are added.
    """
    # For the master-service relation, get all relation_ids
    rel_ids = hookenv.relation_ids('master-service')

    hookenv.log("=> rids: {}".format(str(rel_ids)))

    for rel_id in rel_ids:
        # local_relation = hookenv.relation_get(
        #    unit=hookenv.local_unit(), rid=relation_id)
        # relation_id = hookenv.relation_id()
        hookenv.log("====> r_id: {}".format(rel_id))

        n_workers = 0

        n_operational = 0

        for unit in hookenv.related_units(rel_id):

            n_workers += 1
            
            r = hookenv.relation_get(unit=unit, rid=rel_id)

            op = ['operational']
            
            if op:
                hookenv.log(f"========== OPERATIONAL {op} ============")
                n_operational += 1
            else:
                hookenv.log("====> worker-ready: No value yet.")
        
        hookenv.status_set("active", f"Workers: {n_workers}, Oper: {n_operational}")
            
if __name__ == "__main__":
    master_service_relation_changed()
