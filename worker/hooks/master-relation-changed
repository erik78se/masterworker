#!/usr/bin/env python3
import os
import sys
sys.path.insert(0, os.path.join(os.environ['CHARM_DIR'], 'lib'))
import hookenv

def writeWorkerkeyFile(workerkey):
    """ Write the workerkey to file in the charm directory,
    indicating the service is related to the master """
    WorkerKeyFile = open("WORKERKEY.file", 'w')
    WorkerKeyFile.write(workerkey)
    WorkerKeyFile.close()


def master_relation_changed():
    """
    https://discourse.juju.is/t/charm-hooks/1040

    [name]-relation-changed is always run once, after -joined, and will subsequently be run whenever that remote unit
    changes its settings for the relation. It should be the only hook that relies upon remote relation settings from
    relation-get, and it should not error if the settings are incomplete: you can guarantee that when the remote unit
    changes its settings, the hook will be run again.

    The settings that you can get, and that you should set, are determined by the relationâ€™s interface.

    juju relate master worker
         ->(created)->
                      (joined)->
                                (changed)->

    This is where we access the worker-key provided by the master which
    we should now have available on the relation.
    """
    hookenv.log(" ========= hook: master-relation-changed  ========")

    localunitname = os.environ['JUJU_UNIT_NAME']

    if not hookenv.relation_get(f"{localunitname}-worker-key"):

        hookenv.status_set("waiting", "worker-key not available on the relation.")

    else:

        # Get the key with our worker name on it, e.g.: 'worker/0-worker-key'
        workerKey = hookenv.relation_get(f"{localunitname}-worker-key")

        # Create a file on the unit with our content.
        writeWorkerkeyFile(workerKey)

        # Show the key in the status message for the unit.
        hookenv.status_set("active", f"WorkerKey: {workerKey}")

        masterUnitName = os.environ['JUJU_REMOTE_UNIT']

        masterMessage = hookenv.relation_get('message', unit=masterUnitName)

        hookenv.log(f"MASTER message: {masterMessage}")


if __name__ == "__main__":
    master_relation_changed()