#!/usr/bin/env python3
import os
import sys
sys.path.insert(0, os.path.join(os.environ['CHARM_DIR'], 'lib'))
from hookenv import log, relation_get, status_set

def writeWorkerkeyFile(workerkey):
    """ Write the workerkey to file in the charm directory,
    indicating the service is related to the master """
    WorkerKeyFile = open("WORKERKEY.file", 'w')
    WorkerKeyFile.write(workerkey)
    WorkerKeyFile.close()


def master_relation_changed():
    """
    https://discourse.juju.is/t/charm-hooks/1040

    [name]-relation-changed is always run once, after -joined, and will subsequently be run whenever that remote unit
    changes its settings for the relation. It should be the only hook that relies upon remote relation settings from
    relation-get, and it should not error if the settings are incomplete: you can guarantee that when the remote unit
    changes its settings, the hook will be run again.

    The settings that you can get, and that you should set, are determined by the relationâ€™s interface.

    juju relate master worker
         ->(created)->
                      (joined)->
                                (changed)->
    """
    log(" ========= hook: master-relation-changed  ========")

    localunitname = os.environ['JUJU_UNIT_NAME']

    ## If we have data that belong to this unit
    if relation_get(f"{localunitname}-worker-key"):

        # Get the worker-key with our unit name on it, e.g.: 'worker/0-worker-key'
        workerKey = relation_get(f"{localunitname}-worker-key")

        # As a dummy operation, we create a file on the unit with the key.
        # This would be an example of doing something useful with the
        # data retrieved on the relation. Such as rendering a config
        # or doing something useful with data from the relation.
        # This file is removed as part of the relation-departed hook.
        writeWorkerkeyFile(workerKey)

        # Show key in the status message.
        status_set("active", f"WorkerKey: {workerKey}")

    else:

        status_set("waiting", "worker-key not available for this unit.")

    # Lets always log the message the master unit has, when there is one.
    if relation_get('message'):

        masterUnitName = os.environ['JUJU_REMOTE_UNIT']

        masterMessage = relation_get('message', unit=masterUnitName)

        log(f"MASTER message: {masterMessage}")


if __name__ == "__main__":
    master_relation_changed()
